# 1st lesson
class Employee: 
    def __init__(self, first, last, pay) :
        self.first = first 
        self.last = last
        self.email = first + '.'+  last + '@company.com'
        self.pay = pay 
    def full_name(self):
        return'{} {}'.format(self.first,self.last)

emp_1 = Employee('Corey', 'Wilson',5000) 
emp_2= Employee('Test','User',60000)  
print(emp_1.full_name())
print(Employee.full_name(emp_1)) 
# print(emp_2.full_name())

  
# 2nd lesson   class method
class Employee:
    num_of_emps = 0
    raise_amount = 1.04
    def __init__(self, first, last, pay): 
        self.first = first
        self.last = last
        self. email = first +'_'+ last +'@company.com'
        self.pay = pay 

        Employee.num_of_emps += 1 

    def fullname (self):
        return '{} {}'.format(self.first, self.last)
    
    def apply_raise(self): 
        self.pay= int(self.pay * self.raise_amount)
        return self.pay


emp_1 = Employee('Corey', 'Wilson',5000) 
emp_2= Employee('Test','User',60000) 


emp_1.raise_amount = 1.05

print(emp_1.__dict__)

print (emp_1.raise_amount)
print(Employee.raise_amount)
print(emp_2.raise_amount)

emp_1.raise_amount 
Employee.raise_amount

print (emp_1.pay)
emp_1.apply_raise()
print (emp_1.pay)

print (Employee.num_of_emps)
print(emp_2.apply_raise()) 

#lesson 3  static_method
class Employee: 
    raise_amount = 1.04
    def __init__(self, first, last, pay):
        self.first = first 
        self.last = last 
        self.pay = pay 
        self.email = first +'_'+ last  + '@company.com' 

    def full_name (self):
        return '{} {}'.format(self.first,self.last) 
    
    def apply_raise (self):
        self.pay= self.pay * Employee.raise_amount
        return self.pay
    @classmethod
    def set_raise_amount (cls, amount):
        cls.raise_amount= amount
    @classmethod
    def from_string (cls, emp_str): 
        first, last, pay= emp_str.split('-')
        return cls(first, last, pay)
    
    @staticmethod
    def is_workday (day):
        if day.weekday() == 5 or day.weekday() == 6:
            return False 
        return True

emp_1 = Employee('Corey', 'Wilson',5000) 
emp_2= Employee('Test','User',60000) 
 
# print(emp_1.full_name())
# print(emp_2.__dict__)

# print (emp_1.raise_amount)
# print(Employee.raise_amount)
# print(emp_2.raise_amount)

# emp_str_1 = 'John-Doe-7000'
# emp_str_2 = 'Bella-Proach-6500'
# emp_str_3 = 'Bill-Thompson-7800'

# # first, last, pay = emp_str_1.split('-')

# # new_emp_1 = Employee(first, last, pay)

# new_emp_1 = Employee.from_string(emp_str_1)
# print (new_emp_1.email)
# print (new_emp_1.pay)


import datetime 
my_date = datetime.date(2023,11,10)

print(Employee.is_workday(my_date))


#lesson 4  sub_class
  class Employee: 
    raise_amount = 1.03
    def __init__(self, first, last, pay):
        self.first = first 
        self.last = last
        self. pay = pay 
        self.email = self.first + '_' + self.last + '@gmail.com'
    
    def full_name (self): 
        return '{} {}'.format(self.first, self.last) 
    
    def apply_raise (self): 
        self.pay= self.pay * self.raise_amount
        return self.pay 
class Developer(Employee):
    raise_amount = 1.10

    def __init__(self, first, last, pay, prog_lang):
        super().__init__(first, last, pay)
        self.prog_lang = prog_lang 

class Manager(Employee): 

    def __init__(self, first, last, pay, employees=None):
        super().__init__(first, last, pay)
        if employees is None : 
            self.employees = [] 
        else: 
            self.employees = employees
    
    def add_emp(self, emp): 
        if emp not in self.employees:
            self.employees.append(emp)
    
    def remove_emp(self, emp): 
        if emp in self.employees:
            self.employees.remove(emp)
    
    def print_emps(self): 
        for emp in self.employees: 
            print('-->', emp.full_name())

Dev_1= Developer('Corey', 'Wilson',5000, 'Python') 
Dev_2= Developer('Test','User',60000, 'Java') 

mgr_1 = Manager('Sue',' Smith', 9000, [Dev_1,Dev_2])
# mgr_1.add_emp(Dev_2)
# mgr_1.remove_emp(Dev_1)
# mgr_1.remove_emp(Dev_2)


# print (mgr_1.pay)
mgr_1.print_emps()



# print (Dev_1.pay)
# Dev_1.apply_raise()
# print (Dev_1.pay)

# print(isinstance(mgr_1,Manager))
# print(isinstance(mgr_1,Developer))

# print(issubclass(Manager, Employee))
# print(issubclass(Manager, Developer))


#lesson 5  special/Dunder method
  class Employee: 
    raise_amount = 1.03
    def __init__(self, first, last, pay):
        self.first = first 
        self.last = last
        self. pay = pay 
        self.email = self.first + '_' + self.last + '@gmail.com'
    
    def full_name (self): 
        return '{} {}'.format(self.first, self.last) 
    
    def apply_raise (self): 
        self.pay= self.pay * self.raise_amount
        return self.pay 
class Developer(Employee):
    raise_amount = 1.10

    def __init__(self, first, last, pay, prog_lang):
        super().__init__(first, last, pay)
        self.prog_lang = prog_lang 

class Manager(Employee): 

    def __init__(self, first, last, pay, employees=None):
        super().__init__(first, last, pay)
        if employees is None : 
            self.employees = [] 
        else: 
            self.employees = employees
    
    def add_emp(self, emp): 
        if emp not in self.employees:
            self.employees.append(emp)
    
    def remove_emp(self, emp): 
        if emp in self.employees:
            self.employees.remove(emp)
    
    def print_emps(self): 
        for emp in self.employees: 
            print('-->', emp.full_name())

Dev_1= Developer('Corey', 'Wilson',5000, 'Python') 
Dev_2= Developer('Test','User',60000, 'Java') 

mgr_1 = Manager('Sue',' Smith', 9000, [Dev_1,Dev_2])
# mgr_1.add_emp(Dev_2)
# mgr_1.remove_emp(Dev_1)
# mgr_1.remove_emp(Dev_2)


# print (mgr_1.pay)
mgr_1.print_emps()



# print (Dev_1.pay)
# Dev_1.apply_raise()
# print (Dev_1.pay)

# print(isinstance(mgr_1,Manager))
# print(isinstance(mgr_1,Developer))

# print(issubclass(Manager, Employee))
# print(issubclass(Manager, Developer))
  
  
